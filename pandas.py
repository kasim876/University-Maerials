# шпаргалка по pandas

# pandas это библиотека для работы с табличными данными
# основные объекты pandas - Series и DataFrame

import numpy as np
import pandas as pd

# Объект Series

series = pd.Series([15, -3, 7, 11], index=['a', 'b', 'c', 'd']); # явное описание индексов
series.name = 'numbers';
series.index.name = 'letters';

# print(series);

# если индекс не будет задан явно, то он будет задан автоматически, от 0 до (N-1), где N - количество элементов массива

# Фильтрация данных объекта Series

series = pd.Series([15, -3, 7, 11])

# print(series < 0); # массив с индексами элементов и удовлетворяет ли элемент массива условию
# print(series[series < 0]); # все элементы массива, которые меньше 0

# методы объекта Series

# print(series.min()); # нахождение минимального элемента объекта Series
# print(series.max()); # нахождение максимального элемента объекта Series
# print(series.mean()); # нахождение среднего арифметического объекта Series
# print(series.median()); # нахождение медианного значения объекта Series
# print(series.std()); # нахождение стандартного отклонения объекта Series
# print(series.unique()); # нахождение уникальных значений объекта Series
# print(series.value_counts()); # нахождение частоты уникальных значений объекта Series
# print(series.sort_values()); # сортировка элементов объекта Series
# print(series.head()); # первые 5 элементов объекта Series
# print(series.tail()); # последние 5 элементов объекта Series

# Объект DataFrame - аналог двумерного массива с заданными индексами строк и имен столбцов, то есть табличная структура данных

# способ 1

arr = np.array([[1, 2, 3], [10, 20, 30]]);
df = pd.DataFrame(arr);

# способ 2

d = {
    'column1': pd.Series([1, 2, 3], index=['v1', 'v2', 'v3']),
    'column2': pd.Series([10, 20, 30], index=['v1', 'v2', 'v3']),
}
df = pd.DataFrame(d);

# способ 3

# df = pd.read_csv('ссылка на файл');

# пример использования

df = pd.DataFrame({
    'город': ['Москва', 'Санкт-Петербург', 'Новосибирск'],
    'население': [13.02, 5.6, 1.7],
    'площадь': [2551, 1439, 506],
})

# срезы данных в объекте DataFrame

# print(df['город']); # вывод столбца "город"
# print(df[0:2]); # срез строк, не включая 2
# print(df[df.население > 5]); # выборка городов с населением больше 5 млн


df = pd.DataFrame({
    'город': ['Москва', 'Санкт-Петербург', 'Новосибирск'],
    'население': [13.02, 5.6, 1.7],
    'площадь': [2551, 1439, 506],
});
df.index = ['МОС', 'СПБ', 'НОВОСИБ'];
df.index.name = 'Аббревиатура';

# print(df.loc['СПБ']); # доступ к строке по индексу, заданному пользователем
# print(df.iloc[0]); # доступ к строке по числовой метке

# в pandas есть возможность производить математические вычисления со значениями объекта DataFrame

print(df);

df['плотность'] = df['население'] / df['площадь'] * 1000000;
df = df.drop(['НОВОСИБ'], axis = 0);
df = df.drop(['плотность'], axis = 1);

# также для удаления столбцов можно использовать del:
del df['площадь'];

print(df);
